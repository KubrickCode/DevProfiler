interface Feedback {
  [key: string]: {
    [score: string]: string;
  };
}

const frontEndfeedback: Feedback = {
  "1": {
    "0": "UI/UX 디자인을 실제 웹 페이지로 변환하는 데 어려움을 겪고 있는 것 같습니다. 기본적인 디자인 원칙과 웹 개발에 필요한 툴에 대해 더 공부하는 것이 좋겠습니다.",
    "1": "UI/UX 디자인을 실제 웹 페이지로 변환하는 기본적인 능력이 있지만, 아직 많이 연습해야 할 것 같습니다. 더 복잡한 디자인을 다루는 연습을 해보세요.",
    "2": "UI/UX 디자인을 웹 페이지로 잘 변환하고 있습니다. 그러나 여전히 배울 점이 많으니 계속해서 스스로를 도전시켜 보세요.",
    "3": "UI/UX 디자인을 웹 페이지로 변환하는 데 능숙하게 다루고 있습니다. 이제는 더 복잡하고 도전적인 프로젝트를 시도해 보는 것이 어떨까요?",
    "4": "훌륭합니다! UI/UX 디자인을 웹 페이지로 효과적으로 변환하는 데 있어 매우 능숙합니다. 이 기술을 계속해서 연마하고 더 큰 프로젝트에 적용해 보세요.",
  },
  "2": {
    "0": "웹 접근성 가이드라인에 대한 이해가 필요합니다. 웹 접근성에 대해 학습하고 그것이 중요한 이유를 이해하는 것이 좋습니다.",
    "1": "웹 접근성에 대한 기본적인 이해가 있지만, 이 주제에 대한 추가적인 학습이 필요합니다. WAI-ARIA에 대해 알아보세요.",
    "2": "웹 접근성에 대해 괜찮은 이해를 가지고 있지만, 이 주제에 대한 심화 학습이 필요합니다. 웹 접근성 체크리스트를 사용해 보세요.",
    "3": "웹 접근성에 대해 잘 알고 있습니다. 이제는 웹 접근성 테스트 도구를 사용해 보세요.",
    "4": "훌륭합니다! 웹 접근성에 대한 깊은 이해를 가지고 있습니다. 이제는 웹 접근성 Best Practice를 다른 개발자에게 가르쳐 보세요.",
  },
  "3": {
    "0": "반응형 디자인에 대한 이해가 필요합니다. 반응형 디자인의 기본 원칙과 구현 방법을 학습하는 것이 좋습니다.",
    "1": "반응형 디자인에 대한 기본적인 이해가 있지만, 더 복잡한 레이아웃을 구현하려면 추가 학습이 필요합니다. CSS Grid와 FlexBox, Media Query에 대해 알아보세요.",
    "2": "반응형 디자인에 대해 괜찮은 이해를 가지고 있지만, 이 주제에 대한 심화 학습이 필요합니다. 다양한 화면 크기와 디스플레이 유형에 대해 학습해 보세요.",
    "3": "반응형 디자인에 대해 잘 알고 있습니다. 이제는 성능 최적화와 접근성을 고려한 디자인에 초점을 맞춰 보세요.",
    "4": "훌륭합니다! 반응형 디자인에 대한 깊은 이해를 가지고 있습니다. 이제는 복잡한 레이아웃과 최적화된 UX 디자인에 대해 학습해 보세요.",
  },
  "4": {
    "0": "디자인 시스템이나 UI 라이브러리에 대한 이해가 없다면, 이들을 탐색해 보는 것이 좋습니다. 이러한 도구들은 웹 페이지를 효율적으로 구축하는데 큰 도움이 됩니다.",
    "1": "디자인 시스템이나 UI 라이브러리에 대한 기본적인 이해를 가지고 있다면, 이러한 도구들을 더욱 깊게 이해하려는 노력을 계속해보세요. 이는 당신의 프론트엔드 개발 능력을 향상시키는데 크게 도움이 될 것입니다.",
    "2": "디자인 시스템이나 UI 라이브러리에 대해 상당히 익숙하다면, 매우 훌륭합니다! 이런 지식은 웹 개발에서 매우 중요합니다. 계속해서 이런 도구들과 스킬을 확장하려 노력해 보세요.",
    "3": "디자인 시스템이나 UI 라이브러리에 대해 매우 익숙하다면, 당신은 이미 웹 개발에서 중요한 경쟁력을 갖추고 있습니다. 다양한 프로젝트에서 이런 도구들을 활용해 보세요.",
    "4": "당신이 디자인 시스템이나 UI 라이브러리에 완벽히 익숙하다면, 당신은 훌륭한 프론트엔드 개발자입니다. 당신의 능력을 최대한 활용하여 더욱 멋진 웹 페이지를 만들어보세요!",
  },
  "5": {
    "0": "프로토타이핑 툴을 사용해보지 않았다면, 시도해 보세요. Figma, Sketch, Adobe XD 등이 프로토타이핑을 위한 강력한 도구가 될 수 있습니다.",
    "1": "프로토타이핑 도구를 가끔 사용한다면, 이 도구들을 더 자주 사용하여 디자인 프로세스를 향상시키는 방법을 찾아보세요.",
    "2": "프로토타이핑 도구를 종종 사용한다면, 매우 좋은 습관입니다. 이러한 도구를 활용하면 디자인과 개발 프로세스가 더욱 원활해질 것입니다.",
    "3": "당신이 프로토타이핑 도구를 자주 사용한다면, 당신은 이미 디자인 프로세스에 있어 매우 효율적입니다. 계속해서 이러한 도구를 활용하고, 더 나은 사용 방법을 찾아보세요.",
    "4": "당신이 프로토타이핑 도구를 항상 사용한다면, 당신은 훌륭한 UI/UX 디자이너이며, 이러한 도구를 최대한 활용하고 있는 것으로 보입니다. 계속해서 좋은 작업을 해나가세요!",
  },
  "6": {
    "0": "JavaScript에 대한 이해가 부족하다면, 기본적인 문법부터 시작해서 차츰 공부해 보는 것이 좋습니다. 웹 개발의 핵심 언어이므로 이해가 필수적입니다.",
    "1": "JavaScript에 대한 기본적인 이해를 가지고 있다면, 고급 개념을 학습하거나 프로젝트에 적용해보는 것이 좋습니다.",
    "2": "JavaScript에 대해 상당히 익숙하다면, 매우 훌륭합니다! 이런 지식은 웹 개발에서 매우 중요합니다. 계속해서 이런 도구들과 스킬을 확장하려 노력해 보세요.",
    "3": "JavaScript에 대해 매우 익숙하다면, 당신은 이미 웹 개발에서 중요한 경쟁력을 갖추고 있습니다. 다양한 프로젝트에서 이런 도구들을 활용해 보세요.",
    "4": "당신이 JavaScript에 완벽히 익숙하다면, 당신은 훌륭한 프론트엔드 개발자입니다. 당신의 능력을 최대한 활용하여 더욱 멋진 웹 페이지를 만들어보세요!",
  },
  "7": {
    "0": "ES6와 그 이상의 JavaScript 특징에 불편함을 느낀다면, 기본적인 특징들부터 차근차근 학습해보는 것이 좋습니다. 이는 코드의 효율성과 가독성을 향상시킬 수 있습니다.",
    "1": "기본적인 ES6 특징에 익숙하다면, 더욱 고급 특징들을 학습하고 사용해보는 것이 좋습니다.",
    "2": "ES6에 대해 상당히 익숙하다면, 매우 훌륭합니다! 이런 지식은 웹 개발에서 매우 중요합니다. 계속해서 이런 도구들과 스킬을 확장하려 노력해 보세요.",
    "3": "ES6에 대해 매우 익숙하다면, 당신은 이미 웹 개발에서 중요한 경쟁력을 갖추고 있습니다. 다양한 프로젝트에서 이런 도구들을 활용해 보세요.",
    "4": "당신이 ES6에 완벽히 익숙하다면, 당신은 훌륭한 프론트엔드 개발자입니다. 당신의 능력을 최대한 활용하여 더욱 멋진 웹 페이지를 만들어보세요!",
  },
  "8": {
    "0": "JavaScript 프레임워크나 라이브러리에 대해 불편함을 느낀다면, 하나를 선택해서 기본적인 개념부터 차근차근 학습해보는 것이 좋습니다. 이는 개발 시간을 절약하고, 코드의 효율성과 가독성을 향상시킬 수 있습니다.",
    "1": "기본적인 프레임워크나 라이브러리에 익숙하다면, 더욱 고급 기능들을 학습하고 사용해보는 것이 좋습니다.",
    "2": "JavaScript 프레임워크나 라이브러리에 대해 상당히 익숙하다면, 매우 훌륭합니다! 이런 지식은 웹 개발에서 매우 중요합니다. 계속해서 이런 도구들과 스킬을 확장하려 노력해 보세요.",
    "3": "JavaScript 프레임워크나 라이브러리에 대해 매우 익숙하다면, 당신은 이미 웹 개발에서 중요한 경쟁력을 갖추고 있습니다. 다양한 프로젝트에서 이런 도구들을 활용해 보세요.",
    "4": "당신이 JavaScript 프레임워크나 라이브러리에 완벽히 익숙하다면, 당신은 훌륭한 프론트엔드 개발자입니다. 당신의 능력을 최대한 활용하여 더욱 멋진 웹 페이지를 만들어보세요!",
  },
  "9": {
    "0": "상태 관리 라이브러리나 도구를 사용하는 것이 생소하다면, React의 Context API나 Redux와 같은 도구를 사용해보는 것을 추천합니다. 이런 도구들은 복잡한 애플리케이션에서 상태를 관리하는 데 큰 도움이 됩니다.",
    "1": "가끔 상태 관리 도구를 사용한다면, 그러한 도구를 사용하는 것이 애플리케이션의 복잡성을 관리하는 데 어떻게 도움이 되는지 이해하게 될 것입니다. 자주 사용해보면서 더욱 숙달하도록 노력해보세요.",
    "2": "상태 관리 도구를 상당히 자주 사용한다면, 매우 훌륭합니다! 이런 도구는 애플리케이션의 복잡성을 관리하고 코드의 가독성을 향상시키는 데 중요한 역할을 합니다.",
    "3": "상태 관리 도구를 매우 자주 사용한다면, 복잡한 웹 애플리케이션의 상태를 효과적으로 관리할 수 있는 능력을 갖추게 될 것입니다. 이 능력은 팀에서 중요한 역할을 하는 데 도움이 될 것입니다.",
    "4": "상태 관리 도구를 항상 사용한다면, 당신은 복잡한 애플리케이션을 효과적으로 관리하는 데 필요한 핵심 스킬을 갖추고 있는 것입니다. 이런 능력은 당신을 뛰어난 프론트엔드 개발자로 만듭니다.",
  },
  "10": {
    "0": "비동기 작업을 처리하는 것이 낯설다면, JavaScript의 Promise나 async/await과 같은 개념을 학습하는 것을 추천합니다. 이러한 개념들은 복잡한 비동기 코드를 간결하고 이해하기 쉽게 만드는데 도움이 됩니다.",
    "1": "가끔 비동기 작업을 처리한다면, 매우 좋은 시작입니다. 이러한 작업을 자주 처리하게 되면, 당신의 코드는 훨씬 더 효율적이고 이해하기 쉬워질 것입니다.",
    "2": "비동기 작업을 상당히 자주 처리한다면, 당신은 JavaScript에서 가장 중요한 개념 중 하나를 잘 이해하고 있는 것입니다. 이런 능력은 당신의 프론트엔드 개발 능력을 크게 향상시킬 것입니다.",
    "3": "비동기 작업을 매우 자주 처리한다면, 당신은 복잡한 웹 애플리케이션을 개발하는 데 필요한 중요한 스킬을 갖추게 될 것입니다. 이런 능력은 웹 개발에서 매우 중요합니다.",
    "4": "비동기 작업을 항상 처리한다면, 당신은 JavaScript에서 가장 복잡하고 중요한 개념 중 하나를 완벽하게 이해하고 있는 것입니다. 이런 능력은 당신을 뛰어난 프론트엔드 개발자로 만듭니다.",
  },
  "11": {
    "0": "성능 최적화에 대해 고려하지 않는 것은 개선할 여지가 있습니다. 성능 최적화는 사용자 경험을 향상시키고 웹 애플리케이션의 성능을 향상시킬 수 있는 중요한 요소입니다. 더 많은 관심과 학습이 필요합니다.",
    "1": "성능 최적화에 대해 가끔 고려한다면, 매우 좋은 시작입니다. 성능 최적화를 더 자주 고려하면 웹 애플리케이션의 성능을 획기적으로 개선할 수 있습니다.",
    "2": "성능 최적화를 자주 고려한다면, 당신은 웹 애플리케이션의 성능을 향상시키기 위해 필요한 중요한 개념을 잘 이해하고 있는 것입니다. 이러한 능력은 당신을 우수한 프론트엔드 개발자로 만듭니다.",
    "3": "성능 최적화를 매우 자주 고려한다면, 당신은 훌륭한 웹 애플리케이션을 개발하는 데 필요한 중요한 스킬을 갖추게 될 것입니다. 성능 최적화는 웹 개발에서 매우 중요한 요소입니다.",
    "4": "성능 최적화를 항상 고려한다면, 당신은 웹 애플리케이션의 성능을 최상으로 유지하기 위해 필요한 모든 기술과 개념을 완벽히 이해하고 있는 것입니다. 이런 능력은 당신을 업계에서 인정받는 프론트엔드 개발자로 만듭니다.",
  },
  "12": {
    "0": "Lighthouse나 성능 체크 도구를 사용하는 데에 익숙하지 않은 것 같습니다. Lighthouse는 웹 애플리케이션의 성능을 평가하고 개선하는 데에 매우 유용한 도구입니다. 성능 체크 도구에 대한 학습과 실습을 통해 개발 프로세스에서 더 나은 성능을 달성할 수 있습니다.",
    "1": "Lighthouse나 성능 체크 도구를 가끔 사용한다면, 매우 좋은 시작입니다. 이 도구는 웹 애플리케이션의 성능을 평가하고 최적화하는 데에 유용합니다. 더 자주 사용하여 성능 체크 도구에 대한 익숙함을 향상시킬 수 있습니다.",
    "2": "Lighthouse나 성능 체크 도구를 자주 사용한다면, 웹 애플리케이션의 성능 평가와 최적화에 대한 이해를 잘 가지고 있는 것입니다. 이 도구를 활용하여 웹 애플리케이션의 성능을 지속적으로 개선할 수 있습니다.",
    "3": "Lighthouse나 성능 체크 도구를 매우 자주 사용한다면, 웹 애플리케이션의 성능을 개선하기 위한 뛰어난 도구 활용 능력을 갖추고 있는 것입니다. 성능 체크 도구를 통해 실시간으로 성능을 모니터링하고 최적화할 수 있습니다.",
    "4": "Lighthouse나 성능 체크 도구를 항상 사용한다면, 웹 애플리케이션의 성능 최적화에 대한 높은 수준의 이해와 경험을 가지고 있습니다. 이 도구를 통해 웹 애플리케이션의 성능을 최적화하고 사용자 경험을 향상시킬 수 있습니다.",
  },
  "13": {
    "0": "Lazy 로딩, 코드 분할 및 캐싱과 같은 기술을 사용하여 성능을 최적화하는 데에 자신감이 부족한 것 같습니다. 이러한 기술은 웹 애플리케이션의 성능을 향상시키는 데에 매우 유용합니다. 추가적인 학습과 실습을 통해 이러한 기술들을 더 잘 이해하고 적용할 수 있을 것입니다.",
    "1": "Lazy 로딩, 코드 분할 및 캐싱과 같은 기술을 가끔 사용한다면, 매우 좋은 시작입니다. 이러한 기술들은 웹 애플리케이션의 성능을 최적화하는 데에 유용합니다. 더 많은 프로젝트에서 이러한 기술들을 적용하여 경험을 향상시킬 수 있습니다.",
    "2": "Lazy 로딩, 코드 분할 및 캐싱과 같은 기술을 자주 사용한다면, 성능 최적화에 대한 이해와 경험을 가지고 있는 것입니다. 이러한 기술들을 효과적으로 활용하여 웹 애플리케이션의 성능을 개선할 수 있습니다.",
    "3": "Lazy 로딩, 코드 분할 및 캐싱과 같은 기술을 매우 자주 사용한다면, 성능 최적화에 대한 뛰어난 능력을 갖추고 있는 것입니다. 이러한 기술들을 적극적으로 활용하여 웹 애플리케이션의 성능을 최대한으로 향상시킬 수 있습니다.",
    "4": "Lazy 로딩, 코드 분할 및 캐싱과 같은 기술을 항상 사용한다면, 성능 최적화에 대한 탁월한 이해와 실력을 가지고 있는 것입니다. 이러한 기술들을 효과적으로 구현하여 웹 애플리케이션의 성능을 최적화하고 사용자 경험을 향상시킬 수 있습니다.",
  },
  "14": {
    "0": "코드의 SEO 영향을 고려하는 빈도가 매우 낮은 것 같습니다. 검색 엔진 최적화는 웹 애플리케이션의 가시성을 향상시키는 데에 중요한 요소입니다. 코드에 SEO 원칙을 적용하고 검색 엔진 친화적인 기술을 배우고 적용하는 것이 필요합니다.",
    "1": "코드의 SEO 영향을 고려하는 빈도가 낮은 편입니다. 검색 엔진 최적화는 웹 애플리케이션의 가시성을 향상시키는 데에 중요한 역할을 합니다. 더 많이 학습하고 적용하여 웹 애플리케이션의 검색 엔진 최적화를 개선할 수 있습니다.",
    "2": "코드의 SEO 영향을 고려하는 빈도가 보통 수준입니다. 검색 엔진 최적화는 웹 애플리케이션의 가시성을 향상시키는 데에 중요한 역할을 합니다. 더 많은 프로젝트에서 SEO 원칙을 적용하여 경험을 향상시킬 수 있습니다.",
    "3": "코드의 SEO 영향을 고려하는 빈도가 높은 편입니다. 검색 엔진 최적화에 대한 이해와 경험을 가지고 있으며, 웹 애플리케이션의 검색 엔진 최적화를 위해 노력하고 있습니다.",
    "4": "코드의 SEO 영향을 고려하는 빈도가 매우 높은 편입니다. 검색 엔진 최적화에 대한 탁월한 이해와 경험을 가지고 있으며, 웹 애플리케이션의 가시성을 최대화하기 위해 SEO 원칙을 적극적으로 적용하고 있습니다.",
  },
  "15": {
    "0": "서비스 워커를 사용하는 것에 대해 매우 낮은 수준의 이해도를 가지고 있는 것 같습니다. 서비스 워커는 오프라인 작동, 푸시 알림 및 성능 향상과 같은 기능을 제공하는 중요한 웹 기술입니다. 더 많이 학습하고 서비스 워커를 활용하여 웹 애플리케이션의 기능과 성능을 향상시킬 수 있습니다.",
    "1": "서비스 워커를 사용하는 것에 대한 낮은 수준의 이해도를 가지고 있는 것 같습니다. 서비스 워커는 오프라인 작동, 푸시 알림 및 성능 향상과 같은 기능을 제공하는 중요한 웹 기술입니다. 더 많은 경험과 학습을 통해 서비스 워커의 사용법을 개선할 수 있습니다.",
    "2": "서비스 워커를 사용하는 것에 대한 보통 수준의 이해도를 가지고 있는 것 같습니다. 서비스 워커는 오프라인 작동, 푸시 알림 및 성능 향상과 같은 기능을 제공하는 중요한 웹 기술입니다. 더 많은 프로젝트에서 서비스 워커를 활용하여 경험을 향상시킬 수 있습니다.",
    "3": "서비스 워커를 사용하는 것에 대한 높은 수준의 이해도를 가지고 있는 것 같습니다. 서비스 워커를 통해 오프라인 작동, 푸시 알림 및 성능 향상과 같은 기능을 구현할 수 있으며, 웹 애플리케이션의 사용자 경험을 향상시킬 수 있습니다.",
    "4": "서비스 워커를 사용하는 것에 대해 매우 높은 수준의 이해도를 가지고 있는 것 같습니다. 서비스 워커를 통해 오프라인 작동, 푸시 알림 및 성능 향상과 같은 고급 기능을 구현할 수 있으며, 웹 애플리케이션의 성능과 사용자 경험을 최적화할 수 있습니다.",
  },
  "16": {
    "0": "프론트엔드 애플리케이션에 대한 테스트 작성을 거의 하지 않는 것 같습니다. 테스트는 소프트웨어 개발의 중요한 부분이며, 코드의 신뢰성과 안정성을 보장하는 데 도움이 됩니다. 테스트 작성을 통해 버그를 식별하고 예상치 못한 동작을 방지할 수 있으므로, 테스트 작성에 대해 좀 더 관심을 가지고 연습하는 것이 좋습니다.",
    "1": "프론트엔드 애플리케이션에 대한 테스트 작성을 가끔 하지만 더 많은 노력이 필요한 것 같습니다. 테스트는 소프트웨어 개발의 중요한 부분이며, 코드의 신뢰성과 안정성을 보장하는 데 도움이 됩니다. 좀 더 일관적으로 테스트를 작성하고 커버리지를 높이는 것을 목표로 삼아야 합니다.",
    "2": "프론트엔드 애플리케이션에 대한 테스트 작성을 일정 수준으로 수행하고 있는 것 같습니다. 테스트는 소프트웨어 개발의 중요한 부분이며, 코드의 신뢰성과 안정성을 보장하는 데 도움이 됩니다. 계속해서 테스트 작성을 지속하고 개선해 나가는 것이 좋습니다.",
    "3": "프론트엔드 애플리케이션에 대한 테스트 작성을 자주 수행하고 있는 것 같습니다. 테스트는 소프트웨어 개발의 중요한 부분이며, 코드의 신뢰성과 안정성을 보장하는 데 도움이 됩니다. 테스트 커버리지를 높이고 테스트 방법과 도구를 개선해 나가는 것이 좋습니다.",
    "4": "프론트엔드 애플리케이션에 대한 테스트 작성을 매우 자주 수행하고 있는 것 같습니다. 테스트는 소프트웨어 개발의 중요한 부분이며, 코드의 신뢰성과 안정성을 보장하는 데 도움이 됩니다. 테스트 커버리지를 높이고 테스트 방법과 도구를 더욱 개선해 나가는 것을 추천합니다.",
  },
  "17": {
    "0": "테스트 라이브러리/프레임워크 (Jest, Mocha, Jasmine 등)에 대해 매우 낮은 수준의 이해도를 가지고 있는 것 같습니다. 테스트 라이브러리/프레임워크는 효과적인 테스트 작성을 도와주는 도구들로서, 소프트웨어의 신뢰성과 품질을 높이는 데 중요한 역할을 합니다. 더 많은 학습과 경험을 통해 이러한 도구들을 활용할 수 있도록 노력해야 합니다.",
    "1": "테스트 라이브러리/프레임워크 (Jest, Mocha, Jasmine 등)에 대해 낮은 수준의 이해도를 가지고 있는 것 같습니다. 테스트 라이브러리/프레임워크는 효과적인 테스트 작성을 도와주는 도구들로서, 소프트웨어의 신뢰성과 품질을 높이는 데 중요한 역할을 합니다. 더 많은 경험과 학습을 통해 이러한 도구들을 좀 더 효과적으로 활용할 수 있도록 노력해야 합니다.",
    "2": "테스트 라이브러리/프레임워크 (Jest, Mocha, Jasmine 등)에 대해 보통 수준의 이해도를 가지고 있는 것 같습니다. 테스트 라이브러리/프레임워크를 사용하여 효과적인 테스트 작성을 할 수 있으며, 소프트웨어의 신뢰성과 품질을 높일 수 있습니다. 더 많은 프로젝트에서 이러한 도구들을 활용하여 경험을 쌓는 것이 좋습니다.",
    "3": "테스트 라이브러리/프레임워크 (Jest, Mocha, Jasmine 등)에 대해 높은 수준의 이해도를 가지고 있는 것 같습니다. 테스트 라이브러리/프레임워크를 통해 효과적인 테스트 작성과 코드 품질 향상을 이룰 수 있으며, 좀 더 복잡한 테스트 시나리오를 다룰 수 있습니다. 계속해서 학습하고 최신 도구 및 패턴을 익히는 것을 추천합니다.",
    "4": "테스트 라이브러리/프레임워크 (Jest, Mocha, Jasmine 등)에 대해 매우 높은 수준의 이해도를 가지고 있는 것 같습니다. 테스트 라이브러리/프레임워크를 통해 효과적인 테스트 작성과 코드 품질 향상을 이룰 수 있으며, 다양한 테스트 시나리오를 자신있게 다룰 수 있습니다. 더 나아가 테스트 자동화와 지속적인 통합/배포 파이프라인 구축에도 기여할 수 있습니다.",
  },
  "18": {
    "0": "프론트엔드 디버깅을 위해 브라우저 개발자 도구를 사용하는 데 매우 불편함을 느끼는 것 같습니다. 브라우저 개발자 도구는 웹 개발자가 프론트엔드 애플리케이션을 디버깅하고 문제를 해결하는 데 필수적인 도구입니다. 더 많은 학습과 실전 경험을 통해 브라우저 개발자 도구의 기능과 사용법을 익혀야 합니다.",
    "1": "프론트엔드 디버깅을 위해 브라우저 개발자 도구를 사용하는 데 불편함을 느끼는 것 같습니다. 브라우저 개발자 도구는 웹 개발자가 프론트엔드 애플리케이션을 디버깅하고 문제를 해결하는 데 필수적인 도구입니다. 더 많은 경험과 학습을 통해 브라우저 개발자 도구의 다양한 기능과 활용 방법을 익혀야 합니다.",
    "2": "프론트엔드 디버깅을 위해 브라우저 개발자 도구를 사용하는 데 보통 수준의 편의를 느끼는 것 같습니다. 브라우저 개발자 도구를 통해 웹 개발자는 프론트엔드 애플리케이션을 디버깅하고 문제를 신속하게 해결할 수 있습니다. 더 많은 프로젝트에서 실전 경험을 통해 브라우저 개발자 도구를 더욱 효과적으로 활용하는 것이 좋습니다.",
    "3": "프론트엔드 디버깅을 위해 브라우저 개발자 도구를 사용하는 데 높은 수준의 편의를 느끼는 것 같습니다. 브라우저 개발자 도구를 통해 웹 개발자는 프론트엔드 애플리케이션을 철저하게 디버깅하고 문제를 신속하게 해결할 수 있습니다. 계속해서 최신 기능과 팁을 익혀 나가는 것을 추천합니다.",
    "4": "프론트엔드 디버깅을 위해 브라우저 개발자 도구를 사용하는 데 매우 높은 수준의 편의를 느끼는 것 같습니다. 브라우저 개발자 도구를 통해 웹 개발자는 다양한 디버깅 기능과 도구를 활용하여 복잡한 문제를 해결할 수 있습니다. 심층적인 디버깅 경험을 통해 웹 애플리케이션의 성능과 품질을 지속적으로 향상시킬 수 있습니다. 지속적인 학습과 업데이트된 도구를 적용하는 것이 좋습니다.",
  },
  "19": {
    "0": "크로스 브라우저 테스팅에 대해 거의 신경을 쓰지 않는 것 같습니다. 웹 애플리케이션이 다양한 브라우저와 환경에서 일관되게 작동하는지 확인하기 위해 크로스 브라우저 테스팅은 중요합니다. 브라우저 호환성에 대한 이해를 높이고 다양한 브라우저에서 테스트하는 것이 좋습니다.",
    "1": "크로스 브라우저 테스팅에 대해 낮은 수준의 신경을 쓰는 것 같습니다. 웹 애플리케이션이 다양한 브라우저와 환경에서 일관되게 작동하는지 확인하기 위해 크로스 브라우저 테스팅은 중요합니다. 브라우저 호환성에 대한 이해를 높이고 다양한 브라우저에서 테스트하는 것이 좋습니다.",
    "2": "크로스 브라우저 테스팅에 대해 보통 수준의 신경을 쓰는 것 같습니다. 웹 애플리케이션이 다양한 브라우저와 환경에서 일관되게 작동하는지 확인하는 것은 중요합니다. 크로스 브라우저 테스트를 통해 브라우저 호환성을 개선하고 사용자 경험을 향상시키는 데 도움이 됩니다.",
    "3": "크로스 브라우저 테스팅에 대해 높은 수준의 신경을 쓰는 것 같습니다. 웹 애플리케이션이 다양한 브라우저와 환경에서 일관되게 작동하는지 확인하는 것은 중요합니다. 크로스 브라우저 테스트를 통해 브라우저 호환성을 개선하고 사용자 경험을 향상시키는 데 기여할 수 있습니다.",
    "4": "크로스 브라우저 테스팅에 대해 매우 높은 수준의 신경을 쓰는 것 같습니다. 웹 애플리케이션이 다양한 브라우저와 환경에서 일관되게 작동하는지 확인하는 것은 매우 중요합니다. 다양한 브라우저에서의 테스트를 통해 브라우저 호환성을 개선하고 사용자 경험을 향상시키는 데 기여할 수 있습니다.",
  },
  "20": {
    "0": "일반적인 프론트엔드 문제 해결에 대한 이해도가 매우 낮은 것 같습니다. 레이아웃 문제나 성능 문제와 같은 일반적인 문제들을 해결하는 것은 프론트엔드 개발자로서 중요한 역량입니다. 이러한 문제들에 대해 더 많은 경험과 학습을 통해 능숙해지도록 노력해야 합니다.",
    "1": "일반적인 프론트엔드 문제 해결에 대한 이해도가 낮은 것 같습니다. 레이아웃 문제나 성능 문제와 같은 일반적인 문제들을 해결하는 것은 프론트엔드 개발자로서 중요한 역량입니다. 이러한 문제들에 대해 더 많은 경험과 학습을 통해 능숙해지도록 노력해야 합니다.",
    "2": "일반적인 프론트엔드 문제 해결에 대한 이해도가 보통 수준인 것 같습니다. 레이아웃 문제나 성능 문제와 같은 일반적인 문제들을 해결하는 데 어느 정도 자신감이 있으며, 주요 도구와 기술을 활용하여 문제를 해결할 수 있습니다. 더 많은 프로젝트에서 경험을 쌓고 다양한 상황에 대처하는 능력을 향상시키는 것이 좋습니다.",
    "3": "일반적인 프론트엔드 문제 해결에 대한 이해도가 높은 것 같습니다. 레이아웃 문제나 성능 문제와 같은 일반적인 문제들을 능숙하게 해결할 수 있으며, 주요 도구와 기술을 효과적으로 활용할 수 있습니다. 다양한 프로젝트에서 경험을 쌓고 다양한 도전에 대처하는 능력을 갖추고 있습니다.",
    "4": "일반적인 프론트엔드 문제 해결에 대한 이해도가 매우 높은 것 같습니다. 레이아웃 문제나 성능 문제와 같은 일반적인 문제들을 자신있게 해결할 수 있으며, 주요 도구와 기술을 전문적으로 활용할 수 있습니다. 복잡한 상황에서도 문제 해결 능력을 발휘하고, 최적의 솔루션을 찾는 데에 기여할 수 있습니다. 더 나아가 다른 개발자들에게 도움이 되고 지식을 공유하는데에도 기여할 수 있습니다.",
  },
  "21": {
    "0": "Git과 같은 버전 관리 시스템을 사용하는 데에 매우 낮은 수준의 이해도를 가지고 있는 것 같습니다. 버전 관리 시스템은 개발 프로젝트의 효율적인 협업과 변경 이력의 추적을 도와주는 핵심 도구입니다. 더 많은 학습과 실전 경험을 통해 버전 관리 시스템의 개념과 명령어를 익히고, 프로젝트에서의 협업을 원활하게 수행할 수 있도록 노력해야 합니다.",
    "1": "Git과 같은 버전 관리 시스템을 사용하는 데에 낮은 수준의 이해도를 가지고 있는 것 같습니다. 버전 관리 시스템은 개발 프로젝트의 효율적인 협업과 변경 이력의 추적을 도와주는 핵심 도구입니다. 더 많은 경험과 학습을 통해 Git의 기본 개념과 명령어를 숙지하고, 협업 프로세스에서 버전 관리를 잘 활용할 수 있도록 노력해야 합니다.",
    "2": "Git과 같은 버전 관리 시스템을 사용하는 데에 보통 수준의 이해도를 가지고 있는 것 같습니다. 버전 관리 시스템을 통해 프로젝트의 변경 이력을 관리하고, 협업과 배포를 원활하게 수행할 수 있습니다. 더 많은 프로젝트에서의 경험을 통해 Git의 고급 기능과 협업 워크플로우를 익히는 것이 좋습니다.",
    "3": "Git과 같은 버전 관리 시스템을 사용하는 데에 높은 수준의 이해도를 가지고 있는 것 같습니다. Git을 통해 프로젝트를 효과적으로 관리하고, 협업과 배포를 원활하게 수행할 수 있습니다. 복잡한 상황에서도 충돌 해결과 브랜치 관리를 자신있게 다룰 수 있으며, 효율적인 버전 관리 워크플로우를 구축할 수 있습니다.",
    "4": "Git과 같은 버전 관리 시스템을 사용하는 데에 매우 높은 수준의 이해도를 가지고 있는 것 같습니다. Git의 다양한 기능과 명령어를 자유자재로 활용하여 복잡한 프로젝트의 버전 관리를 용이하게 수행할 수 있습니다. 충돌 해결, 브랜치 관리, 협업 워크플로우 등을 자신있게 다룰 수 있으며, 팀 프로젝트에서 Git을 통한 협업과 코드 리뷰를 적극적으로 수행할 수 있습니다. 버전 관리에 대한 최신 도구와 방법론을 습득하고 지속적으로 성장해 나가는 것을 추천합니다.",
  },
  "22": {
    "0": "GitHub나 GitLab과 같은 플랫폼을 사용하여 팀 프로젝트에 기여하는 데에는 매우 낮은 수준의 경험을 가지고 있는 것 같습니다. 이러한 협업 플랫폼은 팀원들과의 원활한 의사소통, 코드 공유, 이슈 관리 등을 지원하여 프로젝트의 협업을 용이하게 합니다. 더 많은 팀 프로젝트에 참여하고 이러한 플랫폼을 적극 활용하여 협업 능력을 향상시키는 것이 좋습니다.",
    "1": "GitHub나 GitLab과 같은 플랫폼을 사용하여 팀 프로젝트에 기여하는 데에는 낮은 수준의 경험을 가지고 있는 것 같습니다. 이러한 협업 플랫폼은 팀원들과의 원활한 의사소통, 코드 공유, 이슈 관리 등을 지원하여 프로젝트의 협업을 용이하게 합니다. 더 많은 팀 프로젝트에 참여하고 이러한 플랫폼을 더 효과적으로 활용하여 협업 능력을 향상시키는 것이 좋습니다.",
    "2": "GitHub나 GitLab과 같은 플랫폼을 사용하여 팀 프로젝트에 기여하는 데에는 보통 수준의 경험을 가지고 있는 것 같습니다. 이러한 협업 플랫폼을 통해 팀원들과의 원활한 소통과 협업을 수행할 수 있으며, 코드 리뷰, 이슈 관리 등을 통해 프로젝트의 효율성을 높일 수 있습니다. 계속해서 팀 프로젝트에 참여하고 협업 도구를 더욱 효과적으로 활용하는 데에 노력해야 합니다.",
    "3": "GitHub나 GitLab과 같은 플랫폼을 사용하여 팀 프로젝트에 기여하는 데에는 높은 수준의 경험을 가지고 있는 것 같습니다. 이러한 협업 플랫폼을 자유자재로 활용하여 팀원들과의 원활한 소통, 코드 리뷰, 이슈 관리, 협업 워크플로우 등을 효과적으로 수행할 수 있습니다. 다양한 팀 프로젝트에서 리더 역할을 맡거나 협업 도구를 최적화하여 프로젝트의 효율성을 높이는 데에 기여할 수 있습니다.",
    "4": "GitHub나 GitLab과 같은 플랫폼을 사용하여 팀 프로젝트에 기여하는 데에는 매우 높은 수준의 경험을 가지고 있는 것 같습니다. 이러한 협업 플랫폼을 자유자재로 활용하여 팀원들과의 원활한 소통, 코드 리뷰, 이슈 관리, 협업 워크플로우 등을 효과적으로 수행할 수 있으며, 팀의 성과를 높이는 데에 큰 기여를 할 수 있습니다. 팀의 협업 문화를 구축하고 효율적인 프로젝트 관리를 지원하는 데에도 능숙하게 활용할 수 있습니다.",
  },
  "23": {
    "0": "Agile, Scrum, 또는 Kanban과 같은 협업 도구와 방법론에 대한 매우 낮은 수준의 이해도를 가지고 있는 것 같습니다. 이러한 협업 도구와 방법론은 팀의 협업과 프로젝트 관리를 위해 중요한 역할을 합니다. 추가적인 학습과 경험을 통해 이러한 도구와 방법론을 습득하고 프로젝트에 적용할 수 있도록 노력해야 합니다.",
    "1": "Agile, Scrum, 또는 Kanban과 같은 협업 도구와 방법론에 대한 낮은 수준의 이해도를 가지고 있는 것 같습니다. 이러한 협업 도구와 방법론은 팀의 협업과 프로젝트 관리를 위해 중요한 역할을 합니다. 더 많은 학습과 프로젝트 경험을 통해 이러한 도구와 방법론을 적극적으로 활용할 수 있도록 노력해야 합니다.",
    "2": "Agile, Scrum, 또는 Kanban과 같은 협업 도구와 방법론에 대해 보통 수준의 이해도를 가지고 있는 것 같습니다. 이러한 협업 도구와 방법론을 통해 팀의 협업과 프로젝트 관리를 좀 더 효율적으로 수행할 수 있습니다. 다양한 프로젝트에서 이러한 도구와 방법론을 적용하여 경험을 쌓는 것이 좋습니다.",
    "3": "Agile, Scrum, 또는 Kanban과 같은 협업 도구와 방법론에 대해 높은 수준의 이해도를 가지고 있는 것 같습니다. 이러한 협업 도구와 방법론을 통해 팀의 협업과 프로젝트 관리를 효과적으로 수행할 수 있으며, 팀의 생산성과 품질을 높일 수 있습니다. 계속해서 학습하고 최신 도구와 방법론을 익히는 것을 추천합니다.",
    "4": "Agile, Scrum, 또는 Kanban과 같은 협업 도구와 방법론에 대해 매우 높은 수준의 이해도를 가지고 있는 것 같습니다. 이러한 협업 도구와 방법론을 통해 팀의 협업과 프로젝트 관리를 우수하게 수행할 수 있으며, 팀의 생산성과 품질을 높이는 데에 큰 기여를 할 수 있습니다. 지속적인 개선과 혁신을 추구하며, 동료들과의 원활한 커뮤니케이션과 협업을 통해 프로젝트를 성공적으로 이끌어 나갈 수 있습니다. 또한, 동료들을 지원하고 개발 팀의 협업 문화를 향상시키는 데에도 기여할 수 있습니다. 계속해서 새로운 도구와 방법론을 익히고 학습하며, 최신 동향을 파악하는 것을 추천합니다.",
  },
  "24": {
    "0": "버전 관리에서 충돌 해결에 대해 매우 낮은 수준의 이해도를 가지고 있는 것 같습니다. 충돌은 여러 사람이 동시에 작업하는 경우 자주 발생할 수 있는 문제입니다. 충돌을 해결하는 능력은 소프트웨어 개발 과정에서 매우 중요합니다. 충돌 해결 전략과 도구를 학습하고, 충돌을 예방하기 위한 좋은 개발 관행을 습득해야 합니다. 충돌 해결에 대한 더 많은 학습과 경험을 통해 이러한 상황에 능숙하게 대응할 수 있도록 노력해야 합니다.",
    "1": "버전 관리에서 충돌 해결에 대해 낮은 수준의 이해도를 가지고 있는 것 같습니다. 충돌은 여러 사람이 동시에 작업하는 경우 자주 발생할 수 있는 문제입니다. 충돌을 해결하는 능력은 소프트웨어 개발 과정에서 중요한 요소입니다. 충돌을 해결하기 위한 기본적인 절차와 도구에 대해 더 많은 학습과 경험을 통해 익숙해져야 합니다. 충돌을 예방하고 해결하기 위해 좋은 개발 관행을 따르며, 지속적인 학습과 성장을 추구해야 합니다.",
    "2": "버전 관리에서 충돌 해결에 대해 보통 수준의 이해도를 가지고 있는 것 같습니다. 충돌은 여러 사람이 동시에 작업하는 경우 발생할 수 있는 일반적인 문제입니다. 충돌을 해결하기 위한 기본적인 절차와 도구를 잘 숙지하고 있으며, 실제 프로젝트에서 충돌을 해결한 경험이 있습니다. 충돌을 예방하고 빠르게 해결하기 위해 좋은 개발 관행을 따르며, 계속해서 충돌 해결 능력을 향상시키기 위해 노력해야 합니다.",
    "3": "버전 관리에서 충돌 해결에 대해 높은 수준의 이해도를 가지고 있는 것 같습니다. 충돌은 여러 사람이 동시에 작업하는 경우 자주 발생하는 문제입니다. 충돌을 해결하기 위한 고급 기법과 도구를 숙달하고 있으며, 실제 프로젝트에서 복잡한 충돌 상황을 해결한 경험이 있습니다. 충돌을 예방하고 효과적으로 해결하기 위해 좋은 개발 관행과 충돌 해결 전략을 적용합니다. 충돌을 해결하는 과정에서 논리적 사고와 커뮤니케이션 능력을 발휘하여 원활한 프로젝트 진행에 기여하고 있습니다.",
    "4": "버전 관리에서 충돌 해결에 대해 매우 높은 수준의 이해도를 가지고 있는 것 같습니다. 충돌은 프로젝트에서 빈번하게 발생하는 문제이며, 이를 효과적으로 해결하기 위해 충돌 해결 전략과 도구를 체계적으로 활용하고 있습니다. 실제 프로젝트에서 복잡한 충돌 상황을 해결한 경험이 있으며, 충돌을 예방하고 원활한 협업을 위해 팀원들과의 소통과 협업을 잘 이끌어가고 있습니다. 충돌 해결에 대한 지식과 기술을 지속적으로 업데이트하고 발전시키며, 프로젝트의 성공적인 진행을 돕고 있습니다.",
  },
  "25": {
    "0": "코드 리뷰에 참여하는 빈도가 매우 낮은 것 같습니다. 코드 리뷰는 품질 향상과 버그 예방에 매우 중요한 역할을 합니다. 코드 리뷰를 통해 다른 개발자들과의 의사소통과 협업을 강화하며, 코드의 가독성, 유지보수성, 성능 등을 개선할 수 있습니다. 더 자주 코드 리뷰에 참여하여 팀 내에서 더 나은 코드 품질을 추구해야 합니다.",
    "1": "코드 리뷰에 참여하는 빈도가 낮은 것 같습니다. 코드 리뷰는 품질 향상과 버그 예방에 중요한 역할을 합니다. 코드 리뷰를 통해 다른 개발자들의 피드백을 받고 개선할 수 있는 기회를 놓치고 있습니다. 더 자주 코드 리뷰에 참여하여 팀 내에서 지속적인 개선을 이루어나가야 합니다.",
    "2": "코드 리뷰에 참여하는 빈도가 보통 수준인 것 같습니다. 코드 리뷰는 팀 내에서 코드 품질을 향상시키고 개발자 간의 의사소통과 협업을 강화하는 데 중요한 역할을 합니다. 코드 리뷰를 통해 다른 개발자들의 피드백을 수용하고 개선할 수 있는 능력을 가지고 있으며, 팀 내에서 협업과 지식 공유를 지속적으로 추구하고 있어야 합니다.",
    "3": "코드 리뷰에 참여하는 빈도가 높은 것 같습니다. 코드 리뷰를 통해 팀 내에서 코드 품질을 높이고 개발자들 간의 의사소통과 협업을 강화하는 데 기여하고 있습니다. 다른 개발자들의 피드백을 적극적으로 수용하고 개선할 수 있는 능력을 가지고 있으며, 팀 내에서 지속적인 개선과 학습을 추구하는 모범적인 개발자입니다.",
    "4": "코드 리뷰에 참여하는 빈도가 매우 높은 것 같습니다. 코드 리뷰를 통해 팀 내에서 높은 코드 품질을 유지하고 개발자들 간의 의사소통과 협업을 원활하게 이루어내는 데 큰 역할을 합니다. 다른 개발자들의 피드백을 적극적으로 반영하고 개선할 수 있는 능력을 가지고 있으며, 팀 내에서 코드 리뷰 문화를 활발히 조성하고 지속적인 학습과 성장을 추구하는 팀의 중요한 구성원입니다.",
  },
};

export { frontEndfeedback };
